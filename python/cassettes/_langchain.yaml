interactions:
- request:
    body: '{"input": [[8134], [9642]], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '91'
      content-type:
      - application/json
      host:
      - api.openai.com
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.63.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   },\n    {\n      \"object\": \"embedding\",\n      \"index\": 1,\n      \"embedding\":
        \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-ada-002-v2\",\n  \"usage\": {\n
        \   \"prompt_tokens\": 2,\n    \"total_tokens\": 2\n  }\n}\n"
    headers:
      CF-RAY:
      - 91b5d262e8342ed9-LAX
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 05 Mar 2025 01:25:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=dpXfkNtX63NSMSpufQPnhzri9z8A_OudC4vByeMjhX8-1741137951-1.0.1.1-BoEm8MAsoE_IzhtMpDoWTx9uZWEQm8c2DHPij7wStcRznDARoEFbBYT8Dw9RGnUEBCjtlcZdCZvIHNRq1ZYuCvktEl6ZPfrSfHb84dOyaKM;
        path=/; expires=Wed, 05-Mar-25 01:55:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=X1Ot7k844QJFLQNsD2dESAQLsJf8X8LWPMfUffI8VZw-1741137951463-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16691'
      openai-model:
      - text-embedding-ada-002-v2
      openai-organization:
      - langchain
      openai-processing-ms:
      - '218'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-7f5fbff7db-69ts9
      x-envoy-upstream-service-time:
      - '59'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_9f09c1d82d82b0c51a8be5105bea4578
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "You are
      assessing a submitted answer on a given task or input based on a set of criteria.
      Here is the data:\n[BEGIN DATA]\n***\n[Input]: {''context'': ''The man is not
      steering a car'', ''question'': ''Can we logically conclude for sure that the
      man is not steering a SUV?''}\n***\n[Submission]: foo\n***\n[Criteria]: usefulness:
      The prediction is useful if it is correct and/or asks a useful followup question.\n***\n[END
      DATA]\nDoes the submission meet the Criteria? First, write out in a step by
      step manner your reasoning about each criterion to be sure that your conclusion
      is correct. Avoid simply stating the correct answers at the outset. Then print
      only the single character \"Y\" or \"N\" (without quotes or punctuation) on
      its own line corresponding to the correct answer of whether the submission meets
      all criteria. At the end, repeat just the letter again by itself on a new line."}],
      "model": "claude-3-opus-20240229"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '988'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 0.47.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.3
      x-stainless-timeout:
      - NOT_GIVEN
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_013NUAcCMFrqtdnh3VxLxp3L","type":"message","role":"assistant","model":"claude-3-opus-20240229","content":[{"type":"text","text":"Okay,
        let''s think through this step-by-step:\n\nThe input provides the context
        \"The man is not steering a car\" and asks the question \"Can we logically
        conclude for sure that the man is not steering a SUV?\"\n\nThe submission
        simply says \"foo\", which does not appear to be a meaningful response to
        the question.\n\nCriteria: The prediction is useful if it is correct and/or
        asks a useful followup question.\n\nThe submission \"foo\" is not a correct
        response to whether we can logically conclude the man is not steering an SUV.
        It also does not ask any followup question, let alone a useful one.\n\nTherefore,
        the submission does not meet the usefulness criteria, as it is neither correct
        nor does it ask a useful followup.\n\nIn conclusion, the submission does not
        meet the criteria.\n\nN\nN"}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":221,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":183}}'
    headers:
      CF-RAY:
      - 91b5d265ba03cb9a-LAX
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 05 Mar 2025 01:25:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-organization-id:
      - 39635d3b-ebfd-4987-9921-b228d48174d6
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1095'
      request-id:
      - req_018qdY4aB4nGp5fkFfc62Fjo
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "[Instruction]\nPlease
      act as an impartial judge and evaluate the quality of the response provided
      by an AI assistant to the user question displayed below. For this evaluation,
      you should primarily consider the following criteria:\naccuracy: Score 1: Completely
      inaccurate\nScore 5: Somewhat accurate\nScore 10: Completely accurate\n[Ground
      truth]\nYes\nBegin your evaluation by providing a short explanation. Be as objective
      as possible. After providing your explanation, you must rate the response on
      a scale of 1 to 10 by strictly following this format: \"[[rating]]\", for example:
      \"Rating: [[5]]\".\n\n[Question]\n{''context'': ''The man is not steering a
      car'', ''question'': ''Can we logically conclude for sure that the man is not
      steering a SUV?''}\n\n[The Start of Assistant''s Answer]\nfoo\n[The End of Assistant''s
      Answer]"}], "model": "claude-3-opus-20240229", "system": "You are a helpful
      assistant."}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '968'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 0.47.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.3
      x-stainless-timeout:
      - NOT_GIVEN
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_01G3fo3XKJYXWUgU6WimFBBD","type":"message","role":"assistant","model":"claude-3-opus-20240229","content":[{"type":"text","text":"I
        apologize, but I cannot provide an evaluation for the given question and response,
        as there is no actual assistant''s answer provided. The text between the tags
        \"[The Start of Assistant''s Answer]\" and \"[The End of Assistant''s Answer]\"
        only contains the placeholder word \"foo\", which is not a meaningful response
        to the question.\n\nIf you provide the actual response from the AI assistant
        to the given question, I would be happy to evaluate its accuracy based on
        the specified criteria and format."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":213,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":104}}'
    headers:
      CF-RAY:
      - 91b5d28e4cdf08ab-LAX
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 05 Mar 2025 01:26:01 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-organization-id:
      - 39635d3b-ebfd-4987-9921-b228d48174d6
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '803'
      request-id:
      - req_01LGezALfb8KqExzxK4emat9
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
version: 1
