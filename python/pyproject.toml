[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "langsmith"
version = "0.4.10"
description = "Client library to connect to the LangSmith LLM Tracing and Evaluation Platform."
authors = [
    {name = "LangChain", email = "support@langchain.dev"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "langsmith",
    "langchain", 
    "llm",
    "nlp",
    "language",
    "translation",
    "evaluation",
    "tracing",
    "platform",
]
dependencies = [
    "pydantic>=1,<3",
    "requests>=2.0.0",
    "orjson>=3.9.14; platform_python_implementation != 'PyPy'",
    "httpx>=0.23.0,<1",
    "requests-toolbelt>=1.0.0",
    "zstandard>=0.23.0",
    "packaging>=23.2",
]

[project.urls]
Homepage = "https://smith.langchain.com/"
Documentation = "https://docs.smith.langchain.com/"
Repository = "https://github.com/langchain-ai/langsmith-sdk"

[project.optional-dependencies]
# Enabled via `pip install langsmith[langsmith_pyo3]`
langsmith_pyo3 = ["langsmith-pyo3>=0.1.0rc2"]

# Enabled via `pip install langsmith[otel]`
otel = [
    "opentelemetry-sdk>=1.30.0",
    "opentelemetry-api>=1.30.0", 
    "opentelemetry-exporter-otlp-proto-http>=1.30.0",
]

# Enabled via `pip install langsmith[openai-agents]`
openai-agents = ["openai-agents>=0.0.3"]

# Enabled via `pip install langsmith[pytest]`
pytest = ["pytest>=7.0.0", "rich>=13.9.4", "vcrpy>=7.0.0"]

# VCR support
vcr = ["vcrpy>=7.0.0"]

[dependency-groups]
# Development dependencies
dev = [
    "pytest>=8.3.5",
    "mypy>=1.9.0",
    "ruff>=0.6.9",
    "types-requests>=2.31.0.1",
    "pandas-stubs>=2.0.1.230501",
    "types-pyyaml>=6.0.12.10",
    "pytest-asyncio>=0.21.0",
    "types-psutil>=5.9.5.16",
    "psutil>=5.9.5",
    "freezegun>=1.2.2",
    "pytest-subtests>=0.11.0",
    "pytest-watcher>=0.3.4",
    "pytest-xdist>=3.5.0",
    "pytest-cov>=4.1.0",
    "dataclasses-json>=0.6.4",
    "types-tqdm>=4.66.0.20240106",
    "vcrpy>=7.0.0",
    "fastapi>=0.115.4",
    "uvicorn>=0.29.0",
    "pytest-rerunfailures>=14.0",
    "pytest-socket>=0.7.0",
    "pyperf>=2.7.0",
    "py-spy>=0.3.14",
    "multipart>=1.0.0",
    "httpx>=0.23.0,<0.28.0",
    "rich>=13.9.4",
    "pytest-retry>=1.7.0",
    "pytest-dotenv>=0.5.2",
    "opentelemetry-sdk>=1.34.1",
    "opentelemetry-exporter-otlp-proto-http>=1.34.1",
    "opentelemetry-api>=1.34.1",
    "bump2version>=1.0.1",
    "openai-agents>=0.2.4",
]

# Linting dependencies
lint = [
    "openai>=1.55",
]

# Test dependencies
test = [
    "pytest-socket>=0.7.0",
    "anthropic>=0.45.0",
]


[project.entry-points."pytest11"]
langsmith_plugin = "langsmith.pytest_plugin"

[tool.hatch.version]
path = "langsmith/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["langsmith"]

[tool.ruff]
lint.select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "D",    # pydocstyle
  "D401", # First line should be in imperative mood
  "T201",
  "UP",
]
lint.ignore = [
  "UP007",
  "UP045",  # Allow Optional[X] instead of X | None
  # Relax the convention by _not_ requiring documentation for every function parameter.
  "D417",
]
target-version = "py39"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"langsmith/run_helpers.py" = ["E501"]
"docs/conf.py" = ["E501"]
"langsmith/cli/*" = ["T201", "D", "UP"]
"docs/create_api_rst.py" = ["D101", "D103", "E501"]
"docs/scripts/custom_formatter.py" = ["D100"]
"langsmith/anonymizer.py" = ["E501"]
"langsmith/async_client.py" = ["E501"]
"langsmith/client.py" = ["E501"]
"langsmith/schemas.py" = ["E501"]
"tests/evaluation/__init__.py" = ["E501"]
"tests/unit_tests/test_client.py" = ["E501"]
"tests/*" = ["D", "UP"]
"bench/*" = ["D", "UP", "T"]
"docs/*" = ["T", "D"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.mypy]
plugins = ["pydantic.v1.mypy", "pydantic.mypy"]
ignore_missing_imports = "True"
disallow_untyped_defs = "True"

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = ["slow: long-running tests"]

