# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:1984/openapi.json
#   timestamp: 2023-06-08T20:12:19+00:00

from __future__ import annotations

from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class APIFeedbackSource(BaseModel):
    """
    API feedback source.
    """

    type: Optional[str] = Field(default="api", title="Type")
    metadata: Optional[Dict[str, Any]] = Field(default=None, title="Metadata")


class APIKeyCreateResponse(BaseModel):
    """
    API key schema.
    """

    key: str = Field(..., title="Key")


class APIKeyGetResponse(BaseModel):
    """
    API key schema.
    """

    created_at: Optional[datetime] = Field(default=None, title="Created At")
    id: UUID = Field(..., title="Id")


class AppFeedbackSource(BaseModel):
    """
    Feedback from the LangChainPlus App.
    """

    type: Optional[str] = Field(default="app", title="Type")
    metadata: Optional[Dict[str, Any]] = Field(default=None, title="Metadata")


class BodyUploadDatasetDatasetsUploadPost(BaseModel):
    file: bytes = Field(..., title="File")
    input_keys: List[str] = Field(..., title="Input Keys")
    output_keys: List[str] = Field(..., title="Output Keys")
    description: str = Field(..., title="Description")


class CountResponse(BaseModel):
    total: int = Field(..., title="Total")


class Dataset(BaseModel):
    """
    Dataset schema.
    """

    name: str = Field(..., title="Name")
    description: Optional[str] = Field(default=None, title="Description")
    created_at: Optional[datetime] = Field(default=None, title="Created At")
    id: UUID = Field(..., title="Id")
    tenant_id: UUID = Field(..., title="Tenant Id")
    example_count: int = Field(..., title="Example Count")


class DatasetCreate(BaseModel):
    """
    Create class for Dataset.
    """

    name: str = Field(..., title="Name")
    description: Optional[str] = Field(default=None, title="Description")
    created_at: Optional[datetime] = Field(default=None, title="Created At")
    id: Optional[UUID] = Field(default=None, title="Id")


class DatasetUpdate(BaseModel):
    """
    Update class for Dataset.
    """

    name: Optional[str] = Field(default=None, title="Name")
    description: Optional[str] = Field(default=None, title="Description")


class Example(BaseModel):
    """
    Example schema.
    """

    created_at: Optional[datetime] = Field(default=None, title="Created At")
    inputs: Dict[str, Any] = Field(..., title="Inputs")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")
    dataset_id: UUID = Field(..., title="Dataset Id")
    id: UUID = Field(..., title="Id")
    run_count: int = Field(..., title="Run Count")
    run_ids: Optional[List[UUID]] = Field(default=None, title="Run Ids")


class ExampleCreate(BaseModel):
    """
    Create class for Example.
    """

    created_at: Optional[datetime] = Field(default=None, title="Created At")
    inputs: Dict[str, Any] = Field(..., title="Inputs")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")
    dataset_id: UUID = Field(..., title="Dataset Id")
    id: Optional[UUID] = Field(default=None, title="Id")


class ExampleUpdate(BaseModel):
    """
    Update class for Example.
    """

    dataset_id: Optional[UUID] = Field(default=None, title="Dataset Id")
    inputs: Optional[Dict[str, Any]] = Field(default=None, title="Inputs")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")


class FeedbackSource(BaseModel):
    """
    The feedback source loaded from the database.
    """

    type: str = Field(..., title="Type")
    metadata: Optional[Dict[str, Any]] = Field(default=None, title="Metadata")
    user_id: Optional[UUID] = Field(default=None, title="User Id")


class FeedbackUpdateSchema(BaseModel):
    """
    Schema used for updating feedback
    """

    score: Optional[Union[float, int, bool]] = Field(default=None, title="Score")
    value: Optional[Union[float, int, bool, str, Dict[str, Any]]] = Field(
        default=None, title="Value"
    )
    comment: Optional[str] = Field(default=None, title="Comment")
    correction: Optional[Dict[str, Any]] = Field(default=None, title="Correction")


class ModelFeedbackSource(BaseModel):
    """
    Model feedback source.
    """

    type: Optional[str] = Field(default="model", title="Type")
    metadata: Optional[Dict[str, Any]] = Field(default=None, title="Metadata")


class RunShareSchema(BaseModel):
    run_id: UUID = Field(..., title="Run Id")
    share_token: UUID = Field(..., title="Share Token")


class RunTypeEnum(str, Enum):
    """
    Enum for run types.
    """

    TOOL = "tool"
    CHAIN = "chain"
    LLM = "llm"


class RunUpdateSchema(BaseModel):
    end_time: Optional[datetime] = Field(default=None, title="End Time")
    extra: Optional[Dict[str, Any]] = Field(default=None, title="Extra")
    error: Optional[str] = Field(default=None, title="Error")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")
    events: Optional[List[Dict[str, Any]]] = Field(default=None, title="Events")
    parent_run_id: Optional[UUID] = Field(default=None, title="Parent Run Id")
    session_id: Optional[UUID] = Field(default=None, title="Session Id")
    reference_example_id: Optional[UUID] = Field(
        default=None, title="Reference Example Id"
    )


class SourceType(str, Enum):
    """
    Enum for feedback source types.
    """

    API = "api"
    MODEL = "model"
    APP = "app"


class Task(BaseModel):
    """
    Task schema.
    """

    id: UUID = Field(..., title="Id")
    tenant_id: UUID = Field(..., title="Tenant Id")
    target: str = Field(..., title="Target")
    args: Dict[str, Any] = Field(..., title="Args")
    result: Optional[Dict[str, Any]] = Field(default=None, title="Result")
    status: str = Field(..., title="Status")
    created_at: datetime = Field(..., title="Created At")
    updated_at: Optional[datetime] = Field(default=None, title="Updated At")


class TaskPayload(BaseModel):
    """
    Task payload.
    """

    target: str = Field(..., title="Target")
    args: Dict[str, Any] = Field(..., title="Args")


class TaskTargetPayload(BaseModel):
    """
    Task target payload.
    """

    target: str = Field(..., title="Target")
    args: Dict[str, Any] = Field(..., title="Args")
    task_id: UUID = Field(..., title="Task Id")


class Tenant(BaseModel):
    """
    Tenant schema.
    """

    display_name: str = Field(..., title="Display Name")
    id: UUID = Field(..., title="Id")


class TenantCreate(BaseModel):
    """
    Base class for Tenant.
    """

    display_name: str = Field(..., title="Display Name")
    id: Optional[UUID] = Field(default=None, title="Id")


class TracerSession(BaseModel):
    """
    TracerSession schema.
    """

    start_time: Optional[datetime] = Field(default=None, title="Start Time")
    extra: Optional[Dict[str, Any]] = Field(default=None, title="Extra")
    name: Optional[str] = Field(default=None, title="Name")
    id: UUID = Field(..., title="Id")
    run_count: int = Field(..., title="Run Count")
    avg_latency: Optional[timedelta] = Field(default=None, title="Avg Latency")
    total_tokens: Optional[int] = Field(default=None, title="Total Tokens")
    prompt_tokens: Optional[int] = Field(default=None, title="Prompt Tokens")
    completion_tokens: Optional[int] = Field(default=None, title="Completion Tokens")
    tenant_id: UUID = Field(..., title="Tenant Id")
    last_run_start_time: Optional[datetime] = Field(
        default=None, title="Last Run Start Time"
    )


class TracerSessionCreate(BaseModel):
    """
    Create class for TracerSession.
    """

    start_time: Optional[datetime] = Field(default=None, title="Start Time")
    extra: Optional[Dict[str, Any]] = Field(default=None, title="Extra")
    name: Optional[str] = Field(default=None, title="Name")
    id: Optional[UUID] = Field(default=None, title="Id")


class TracerSessionWithoutVirtualFields(BaseModel):
    """
    TracerSession schema.
    """

    start_time: Optional[datetime] = Field(default=None, title="Start Time")
    extra: Optional[Dict[str, Any]] = Field(default=None, title="Extra")
    name: Optional[str] = Field(default=None, title="Name")
    id: UUID = Field(..., title="Id")
    tenant_id: UUID = Field(..., title="Tenant Id")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class FeedbackCreateSchema(BaseModel):
    """
    Schema used for creating feedback.
    """

    created_at: Optional[datetime] = Field(default=None, title="Created At")
    modified_at: Optional[datetime] = Field(default=None, title="Modified At")
    run_id: UUID = Field(..., title="Run Id")
    key: str = Field(..., title="Key")
    score: Optional[Union[float, int, bool]] = Field(default=None, title="Score")
    value: Optional[Union[float, int, bool, str, Dict[str, Any]]] = Field(
        default=None, title="Value"
    )
    comment: Optional[str] = Field(default=None, title="Comment")
    correction: Optional[Dict[str, Any]] = Field(default=None, title="Correction")
    id: Optional[UUID] = Field(default=None, title="Id")
    feedback_source: Optional[
        Union[AppFeedbackSource, APIFeedbackSource, ModelFeedbackSource]
    ] = Field(default=None, title="Feedback Source")


class FeedbackSchema(BaseModel):
    """
    Schema for getting feedback.
    """

    created_at: Optional[datetime] = Field(default=None, title="Created At")
    modified_at: Optional[datetime] = Field(default=None, title="Modified At")
    run_id: UUID = Field(..., title="Run Id")
    key: str = Field(..., title="Key")
    score: Optional[Union[float, int, bool]] = Field(default=None, title="Score")
    value: Optional[Union[float, int, bool, str, Dict[str, Any]]] = Field(
        default=None, title="Value"
    )
    comment: Optional[str] = Field(default=None, title="Comment")
    correction: Optional[Dict[str, Any]] = Field(default=None, title="Correction")
    id: UUID = Field(..., title="Id")
    feedback_source: Optional[FeedbackSource] = None


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(default=None, title="Detail")


class RunCreateSchema(BaseModel):
    name: str = Field(..., title="Name")
    start_time: Optional[datetime] = Field(default=None, title="Start Time")
    end_time: Optional[datetime] = Field(default=None, title="End Time")
    extra: Dict[str, Any] = Field(..., title="Extra")
    error: Optional[str] = Field(default=None, title="Error")
    execution_order: int = Field(..., title="Execution Order")
    serialized: Dict[str, Any] = Field(..., title="Serialized")
    inputs: Dict[str, Any] = Field(..., title="Inputs")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")
    parent_run_id: Optional[UUID] = Field(default=None, title="Parent Run Id")
    reference_example_id: Optional[UUID] = Field(
        default=None, title="Reference Example Id"
    )
    run_type: RunTypeEnum
    events: Optional[List[Dict[str, Any]]] = Field(default=None, title="Events")
    id: Optional[UUID] = Field(default=None, title="Id")
    session_id: Optional[UUID] = Field(default=None, title="Session Id")
    session_name: Optional[str] = Field(default=None, title="Session Name")
    child_runs: Optional[List[RunCreateSchema]] = Field(
        default=None, title="Child Runs"
    )


class RunPublicSchema(BaseModel):
    name: str = Field(..., title="Name")
    start_time: Optional[datetime] = Field(default=None, title="Start Time")
    end_time: Optional[datetime] = Field(default=None, title="End Time")
    extra: Dict[str, Any] = Field(..., title="Extra")
    error: Optional[str] = Field(default=None, title="Error")
    execution_order: int = Field(..., title="Execution Order")
    serialized: Dict[str, Any] = Field(..., title="Serialized")
    inputs: Dict[str, Any] = Field(..., title="Inputs")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")
    parent_run_id: Optional[UUID] = Field(default=None, title="Parent Run Id")
    reference_example_id: Optional[UUID] = Field(
        default=None, title="Reference Example Id"
    )
    run_type: RunTypeEnum
    events: Optional[List[Dict[str, Any]]] = Field(default=None, title="Events")
    id: UUID = Field(..., title="Id")
    session_id: UUID = Field(..., title="Session Id")
    child_run_ids: Optional[List[UUID]] = Field(default=None, title="Child Run Ids")


class RunSchema(BaseModel):
    name: str = Field(..., title="Name")
    start_time: Optional[datetime] = Field(default=None, title="Start Time")
    end_time: Optional[datetime] = Field(default=None, title="End Time")
    extra: Dict[str, Any] = Field(..., title="Extra")
    error: Optional[str] = Field(default=None, title="Error")
    execution_order: int = Field(..., title="Execution Order")
    serialized: Dict[str, Any] = Field(..., title="Serialized")
    inputs: Dict[str, Any] = Field(..., title="Inputs")
    outputs: Optional[Dict[str, Any]] = Field(default=None, title="Outputs")
    parent_run_id: Optional[UUID] = Field(default=None, title="Parent Run Id")
    reference_example_id: Optional[UUID] = Field(
        default=None, title="Reference Example Id"
    )
    run_type: RunTypeEnum
    events: Optional[List[Dict[str, Any]]] = Field(default=None, title="Events")
    id: UUID = Field(..., title="Id")
    session_id: UUID = Field(..., title="Session Id")
    child_run_ids: Optional[List[UUID]] = Field(default=None, title="Child Run Ids")
    parent_run_ids: Optional[List[UUID]] = Field(default=None, title="Parent Run Ids")
    feedback_stats: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None, title="Feedback Stats"
    )


RunCreateSchema.update_forward_refs()
